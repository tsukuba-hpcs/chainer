version: 2
jobs:
  build:
    docker:
      - image: ubuntu:xenial
    steps:

      # Setup
      - run:
          name: Setup
          command: |
            apt-get update
            apt-get install -y g++ cmake clang-6.0 clang-format-6.0 git python3-dev wget
            apt-get install openssh-client  # To avoid warning on checkout
            apt-get install -y bzip2  # To install miniconda
            apt-get install -y parallel  # Used in scripts

            update-alternatives --install /usr/bin/clang clang /usr/bin/clang-6.0 1 \
                --slave /usr/bin/clang-format clang-format /usr/bin/clang-format-6.0 \

            # To avoid configuring PATH environment variable in every steps
            echo 'export PATH="$HOME"/miniconda/bin:"$PATH"' >> $BASH_ENV

      # Checkout
      - checkout

      # Checkout postprocess
      - run:
          name: Checkout postprocess
          command: |
            if [[ -n "${CIRCLE_PULL_REQUEST}" ]]
            then
                # CIRCLE_PR_NUMBER is available only if PR is created from a fork (unavailable if created from a branch).
                # So, manually construct it from CIRCLE_PULL_REQUEST environment variable.
                CIRCLE_PR_NUMBER=$(basename "${CIRCLE_PULL_REQUEST}")

                # Update PR refs for testing.
                FETCH_REFS="+master:master"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/head:pr/${CIRCLE_PR_NUMBER}/head"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pr/${CIRCLE_PR_NUMBER}/merge"

                # Retrieve the refs
                echo "git fetch -u origin ${FETCH_REFS}"
                git fetch -u origin ${FETCH_REFS}

                # Checkout master and merge PR head ref. If conflicts occur, exit with non-zero.
                echo "git checkout master"
                git checkout master
                git config user.name 'xchainer' # need to configure something to git merge
                git config user.email 'xchainer@xchainer.org'
                echo "git merge --no-commit \"pr/${CIRCLE_PR_NUMBER}/head\""
                git merge --no-commit "pr/${CIRCLE_PR_NUMBER}/head"
            fi

      # Setup conda
      - run:
          name: Setup conda
          command: |
            mkdir -p downloads

            # conda
            wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh' -O downloads/miniconda.sh
            bash downloads/miniconda.sh -b -p "$HOME"/miniconda
            conda config --set changeps1 no
            conda update -y -q conda
            conda create -y -q --name testenv python=3.6 pip

      # Environment info
      - run:
          name: Environment info
          command: |
            source activate testenv

            echo "PWD: $PWD"

            echo
            echo "----- g++ -----"
            g++ --version

            echo
            echo "----- cmake -----"
            cmake --version

            echo
            echo "----- python -----"
            python --version

            echo
            echo "----- conda -----"
            conda info -a

      # Setup conda environment
      - run:
          name: Setup conda environment
          command: |
            source activate testenv

            pip install -U autopep8
            pip install -U 'pbr>=1.8'
            pip install -U 'pep8==1.5.7'
            pip install -U 'pyflakes==0.8.1'
            pip install -U 'flake8==3.5.0'
            pip install -U 'mccabe==0.6.1'
            pip install -U 'six>=1.9.0'

            pip install -U pytest pytest-cov coveralls
            pip install -U cpplint
            pip install -U chainer --pre

      # Python PEP-8 check
      - run:
          name: Python PEP-8 check
          command: |
            source activate testenv

            flake8 --version
            flake8 setup.py python tests examples

            autopep8 --version
            autopep8 setup.py python tests examples -r --global-config .pep8 --diff | tee check_autopep8
            test ! -s check_autopep8

      # ClangFormat
      - run:
          name: ClangFormat
          command: |
            scripts/run-clang-format.sh --jobs 4

      # cpplint
      - run:
          name: cpplint
          command: |
            source activate testenv

            scripts/run-cpplint.sh --jobs 4

      # Setup openblas
      - run:
          name: Setup openblas
          command: |
            source activate testenv

            conda install -c anaconda openblas
            # TODO(sonots): Fix we get warnings like
            # /usr/bin/cmake: /root/miniconda/envs/testenv/lib/libssl.so.1.0.0: no version information available (required by /usr/lib/x86_64-linux-gnu/libcurl.so.4)
            echo "export LD_LIBRARY_PATH=\"$CONDA_PREFIX/lib:$LD_LIBRARY_PATH\"" >> $BASH_ENV
            echo "export CPATH=\"$CONDA_PREFIX/include:$CPATH\"" >> $BASH_ENV

      # cmake
      - run:
          name: cmake
          command: |
            source activate testenv

            mkdir -p build
            pushd build
            cmake -DXCHAINER_BUILD_PYTHON=1 -DXCHAINER_ENABLE_COVERAGE=ON -DXCHAINER_WARNINGS_AS_ERRORS=ON -DCMAKE_INSTALL_PREFIX=$HOME/local ..
            popd

      # make
      - run:
          name: make
          command: |
            source activate testenv

            pushd build
            make -j 6 --output-sync
            popd

      # make install
      - run:
          name: make install
          command: |
            source activate testenv

            pushd build
            make install
            popd

      # C++ test
      - run:
          name: C++ test
          command: |
            source activate testenv

            pushd build
            ctest -V
            popd

      # Python test
      # NOTE: `python setup.py build` should be done after `make` so that we can reuse compiled object files.
      - run:
          name: Python test
          command: |
            source activate testenv

            python setup.py build --debug --build-temp ./build --build-lib ./build develop

            # Run all non-CUDA tests except doctests
            # TODO(niboshi): threshold is temporarily lowered from 80 to 50. Restore it after writing tests for testing package.
            pytest -m='not cuda' -p no:doctest --cov --no-cov-on-fail --cov-fail-under=50 --cov-report html:build/coverage/python

            # Run all non-CUDA doctests
            find tests/acceptance_tests -name '*.rst' -not -name '*_cuda.rst' -print0 | xargs -0 pytest

experimental:
  notify:
    branches:
      only:
        - nightly
