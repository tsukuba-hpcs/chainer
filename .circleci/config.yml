version: 2
jobs:
  build:
    docker:
      - image: ubuntu:xenial
    steps:
      # Setup
      # - run:
      #     name: Setup
      #     command: |
      #       apt-get update
      #       apt-get install -y g++ cmake clang clang-format clang-tidy git python3-dev lcov wget
      #       apt-get install openssh-client  # To avoid warning on checkout
      #       apt-get install -y bzip2  # To install miniconda

      #       # To avoid configuring PATH environment variable in every steps
      #       echo 'export PATH="$HOME"/miniconda/bin:"$PATH"' >> $BASH_ENV

      - run:
          name: Setup
          command: |
            apt-get update
            apt-get install -y git
            apt-get install -y openssh-client

      # Checkout
      - checkout

      # Checkout postprocess
      - run:
          name: Checkout postprocess
          command: |
            if [[ -n "${CIRCLE_PULL_REQUEST}" ]]
            then
                # CIRCLE_PR_NUMBER is available only if PR is created from a fork (unavailable if created from a branch).
                # So, manually construct it from CIRCLE_PULL_REQUEST environment variable.
                CIRCLE_PR_NUMBER=$(basename "${CIRCLE_PULL_REQUEST}")

                # Update PR refs for testing.
                FETCH_REFS="+${master}:${master}"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/head:pr/${CIRCLE_PR_NUMBER}/head"
                FETCH_REFS="${FETCH_REFS} +refs/pull/${CIRCLE_PR_NUMBER}/merge:pr/${CIRCLE_PR_NUMBER}/merge"

                # Retrieve the refs
                echo "git fetch -u origin ${FETCH_REFS}"
                git fetch -u origin ${FETCH_REFS}

                # Checkout PR merge ref.
                echo "git checkout -qf \"pr/${CIRCLE_PR_NUMBER}/merge\""
                git checkout -qf "pr/${CIRCLE_PR_NUMBER}/merge"

                # Test for merge conflicts.
                echo "git branch --merged"
                git branch --merged
                echo "git branch --merged | grep master > /dev/null"
                git branch --merged | grep master > /dev/null
                echo "git branch --merged | grep \"pr/${CIRCLE_PR_NUMBER}/head\" > /dev/null"
                git branch --merged | grep "pr/${CIRCLE_PR_NUMBER}/head" > /dev/null
            fi

      # Setup conda
      # - run:
      #     name: Setup conda
      #     command: |
      #       mkdir -p downloads

      #       # conda
      #       wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh' -O downloads/miniconda.sh
      #       bash downloads/miniconda.sh -b -p "$HOME"/miniconda
      #       conda config --set changeps1 no
      #       conda update -y -q conda
      #       conda create -y -q --name testenv python=3.6 pip

      # # Environment info
      # - run:
      #     name: Environment info
      #     command: |
      #       source activate testenv

      #       echo "PWD: $PWD"

      #       g++ --version
      #       cmake --version
      #       clang-format --version
      #       python --version

      #       echo
      #       echo "----- conda -----"
      #       conda info -a

      # # Setup conda environment
      # - run:
      #     name: Setup conda environment
      #     command: |
      #       source activate testenv

      #       pip install -U hacking autopep8
      #       pip install -U pytest pytest-cov coveralls

      # # Python PEP-8 check
      # - run:
      #     name: Python PEP-8 check
      #     command: |
      #       source activate testenv

      #       flake8 --version
      #       flake8 setup.py python tests

      #       autopep8 --version
      #       autopep8 setup.py python tests -r --global-config .pep8 --diff | tee check_autopep8
      #       test ! -s check_autopep8

      # # Python test
      # - run:
      #     name: Python test
      #     command: |
      #       source activate testenv

      #       python setup.py build --debug --build-temp ./build --build-lib ./build develop
      #       pytest -m='not cuda' --cov --no-cov-on-fail --cov-fail-under=80 --cov-report html:build/coverage/python

      # # ClangFormat
      # - run:
      #     name: ClangFormat
      #     command: |
      #       find xchainer \( -name '*.cc' -o -name '*.h' -o -name '*.cu' \) -type f -print0 | xargs -0 -P4 -I{} bash -c 'diff -u {} <(clang-format {})'

      # # C++ test
      # - run:
      #     name: C++ test
      #     command: |
      #       source activate testenv

      #       ( mkdir -p build && cd build && cmake -DBUILD_PYTHON=1 -DENABLE_COVERAGE=ON .. && make clang-tidy && make && ctest -V )
      #       lcov -c -b xchainer -d build/xchainer/ --no-external -o build/coverage.info
      #       genhtml build/coverage.info -o build/coverage/cpp

      # - store_artifacts:
      #     path: build/coverage
